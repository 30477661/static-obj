/*---------------------------------------------------------------------------*\
|  Subject:       JavaScript validation API
|验证API
|验证函数列表：
|
|judgeDigit(arguments...) :判断是否数字
|三种调用方式:
|1.一个参数,简单判断是否为数字,但长度不超过10位
|2.三个参数,第二个参数为 '>'(大于) 或 '<'(小于),第3个参数为要比较的数字
|3.三个参数，第二个参数与第三个参数均为整数，判断传入的第一个参数值是否在他们中间.(含边界)
|
|judgeFloat(arguments...):浮点数
|如果是一个参数，那么判断是否为浮点数
|如果有两个参数，那么将第二个参数作为精度限定参数
|如果有三个参数，那么第二个参数为最小值，第三个参数是将作为数值上限
|
|isDigit(str):是否数字
|
|isSignName(arguments...)
|两种调用方式：
|一个参数：(默认为2--32位)，判断标识符或是登录名
|判断标识符或是登录名，以字母开头,可带数字、"_"、"." 的字串
|三个参数：
|限定最小长度(第二个参数)与最大长度(第三个参数)
|
|isRealName(str) :判断是否是真实姓名
|isTel(str) :电话号码:除数字外，可含有"-".校验普通电话，除数字外，可用"-"或空格分开
|isMobileCN(s) :中国大陆地区手机号码,以13或15开头，使用时请根据变化修改,
|isPostalCodeCN(s):中国地区邮编
|isEmail(s) :E-mail
|isURL(s) :URL
|isIP(s):IP-32
|isHtmlTag(s):HTML Tag
|isIDNumber15(s):身份证号15位
|isIDNumber18(s):身份证号18位
|isChineseString(s):中文字符
|isDoubleByteString(s):双字节
|hasHESpace(s):是否包含首尾空格，如果包含，返回TRUE
|isQQ(s):QQ
|isFloat(s):是否是浮点数
|isLeapYear(y):是否闰年
|isDateYMD(s):日期：yyyy-mm-dd 或 yyyy/mm/dd,支持1600年以后(包含闰年验证)
|isDateDMY(s):日期：dd-mm-yyyy 或 dd/mm/yyyy,支持1600年以后(包含闰年验证)
|isDateMDY(s):日期：mm/dd/yyyy 或 mm-dd-yyyy,支持1600年以后(包含闰年验证)
|isDateTimeYMD(s):日期：yyyy/mm/dd hh:mm:ss 或 yyyy-mm-dd hh:mm:ss,支持1600年以后(包含闰年验证)
|
|containsSpecialChar()
|是否包含非特殊字符(正常字符包括字母数字,下划线,和点号,空格,@#$% 和双字节)若包含,返回true
|
|以下方法遵守这样的调用法则:
|1.一个参数，不限制长度
|2.三个参数，第二个参数表示允许的最小长度，第三个参数表示允许的最大长度
|
|isDigitString():数字
|isLetter():字母
|isUpperLetter():大写字母
|isLowerLetter():小写字母
|isLetterNumString():字母与数字
|isLNUString() :数字，字母，下划线字符串
|
|兼容性:在IE6.0与Firefox2.0下测试通过。
|License:Apache license2.0.请在使用此代码时包含license与作者信息.
\*-----------------------------------------------------------------------------------------*/


//判断日期
function isdate(str){
var reg = /^(\d{1,4})(-|\/)(\d{1,2})\2(\d{1,2})$/;
//var reg = /^(\d{1,4})(-|\/)(\d{1,2})\2(\d{1,2}) (\d{1,2}):(\d{1,2}):(\d{1,2})$/;
var r = str.match(reg);
if(r==null)return false;
var d= new Date(r[1], r[3]-1,r[4],r[5],r[6],r[7]);
var newStr=d.getFullYear()+r[2]+(d.getMonth()+1)+r[2]+d.getDate()+" "+d.getHours()+":"+d.getMinutes()+":"+d.getSeconds()
return Date.parse.toLocaleString(newStr)==Date.parse.toLocaleString(str);
}

/**
*是否数字
*/
function isDigit(s){
	var patrn=/^-?[0-9]{1,10}$/;
	return patrn.test(s);
}

/**
* 判断标识符或是登录名，以字母开头,可带数字、"_"、"." 的字串
* 限定最小长度(第二个参数)与最大长度(第三个参数)(默认为2--32位)
* @param string
* @param min length
* @param max length
*/
function isSignName(){
	var s = arguments[0];
	if(arguments.length == 1){
		var patrn=/^[a-zA-Z]{1}([a-zA-Z0-9]|[._]){1,31}$/;
		return patrn.test(s);
	}else if(arguments.length == 3){
		if(isDigit(arguments[1]) && isDigit(arguments[2])){
			eval("var patrn=/^[a-zA-Z]{1}([a-zA-Z0-9]|[._]){" + (parseInt(arguments[1]) - 1) + "," + (parseInt(arguments[2]) - 1) + "}$/;");
			return eval("patrn.test(s);");
		}else{
			alert('Error:the 2nd argument and the 3rd argument must be number.');
			return false;
		}
	}else{
		alert('method invoke error.error arguments number.');
		return false;
	}
}
/**
*判断是否是真实姓名
*/
function isRealName(s){
	var patrn = /^([a-zA-Z0-9]|[._ ]){2,64}$/;		//英文名
	var p2 = /^([^\x00-\xff]|[\s]){2,32}$/;		//双字节名
	return patrn.test(s) || p2.test(s);
}

/**
* 电话号码
* 必须以数字开头，除数字外，可含有"-"
**/
function isTel(s){
	var patrn=/^[+]{0,1}(\d){1,3}[ ]?([-]?((\d)|[ ]){1,12})+$/;
	return patrn.test(s);
}

/**
* 中国大陆地区手机号码
* 以13或15开头，使用时请根据变化修改
* 校验普通电话，除数字外，可用"-"或空格分开
**/
function isMobileCN(s){
	 var patrn = /^0{0,1}(13[0-9]?|15[8-9]?|153|156)[0-9]{8}$/;
	// var patrn = /^1[3|5]{1}[0-9]{1}[-| ]?\d{8}$/;
	return patrn.test(s);
}

/**
* 中国地区邮编
***/
function isPostalCodeCN(s){
	var patrn=/^[1-9]\d{5}$/;
	return patrn.test(s);
}
/**Emai*/
function isEmail(s){
	var patrn = /^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/;
	return patrn.test(s);
}

/**URL*/
function isURL(s){
	var patrn = /^http:\/\/([\w-]+(\.[\w-]+)+(\/[\w-   .\/\?%&=\u4e00-\u9fa5]*)?)?$/;
	return patrn.test(s);
}
/**
* IP
**/
function isIP(s) {
	var patrn=/^((1?\d?\d|(2([0-4]\d|5[0-5])))\.){3}(1?\d?\d|(2([0-4]\d|5[0-5])))$/;
	return patrn.test(s);
}
/**
*是否是完整的正则表达式
*只有开始标记与结束标记相匹配才为TRUE
*HTML Tag
*/
function isHtmlTag(s){
	var patrn = /^<(.*)>.*<\/\1>|<(.*) \/>$/;
	return patrn.test(s);
}
/**
*身份证号
*这里的省与地区码还没有判断
*15位
*/
function isIDNumber15(s){
	var patrn=/^[\d]{6}((\d{2}((0[13578]|1[02])(0[1-9]|[12]\d|3[01])|(0[13456789]|1[012])(0[1-9]|[12]\d|30)|02(0[1-9]|1\d|2[0-8])))|([02468][048]|[13579][26])0229)[\d]{3}$/;
	return patrn.test(s);
}
/**
*身份证号
*这里的省与地区码还没有判断
*18位
*/
function isIDNumber18(s){
	var patrn = /^[\d]{6}[0-9]{4}(((0[13578]|(10|12))(0[1-9]|[1-2][0-9]|3[0-1]))|(02(0[1-9]|[1-2][0-9]))|((0[469]|11)(0[1-9]|[1-2][0-9]|30)))[\d]{3}[\d|x|X]$/;
	return patrn.test(s);
}

/**
*中文
*/
function isChineseString(s){
	var patrn = /^[\u4e00-\u9fa5]+$/
	return patrn.test(s);
}
/**
*双字节
*/
function isDoubleByteString(s){
	var patrn = /^[^x00-xff]+$/;
	return patrn.test(s);
}
/**
*是否包含首尾空格，如果包含，返回TRUE
*/
function hasHESpace(s){
	var patrn = /^\s+|\s+$/;
	return patrn.test(s);
}
/**
*	QQ，最大10位，最小5位
*/
function isQQ(s){
	var patrn=/^[1-9]{1}\d{4,9}$/;
	return patrn.test(s);
}
/**
*浮点数
*	如果是一个参数，那么判断是否为浮点数
*	如果有两个参数，那么将第二个参数作为精度限定参数
*	如果有三个参数，那么第三个参数是将作为数值上限
*/
function judgeFloat(){
	if(arguments.length == 1){
		return isFloat(arguments[0]);
	}else if(arguments.length == 2){
		eval("var patrn = /^-?\\d+.?\\d{0," + arguments[1] + "}$/;");
		return eval("patrn.test(arguments[0]);");
	}else if(arguments.length == 4){
		var a3 = arguments[2];
		if(a3 == '>' || a3 == '<'){
			if(isFloat(arguments[3])){
				eval("var patrn = /^-?\\d+.?\\d{0," + arguments[1] + "}$/;");
				if(eval("patrn.test(arguments[0]);")){
					if(a3 == '<'){
						if(parseFloat(arguments[0]) < parseFloat(arguments[3])) return true;
					}else{
						if(parseFloat(arguments[0]) > parseFloat(arguments[3])) return true;
					}
				}
				return false;
			}
		}else if(isFloat(a3)){
			eval("var patrn = /^-?\\d+.?\\d{0," + arguments[1] + "}$/;");
				if(eval("patrn.test(arguments[0]);")){
					var f0 = parseFloat(arguments[0]);
					var f3 = parseFloat(arguments[2]);
					var f4 = parseFloat(arguments[3]);
					return f0 >= f3 && f0 <= f4;
				}else{
					return false;
				}
		}else{
			alert('the 3rd and the 4th arguments are not number.');
			return false;
		}
	}
	return false;
}
/**
*是否是浮点数
**/
function isFloat(s){
	var patrn = /^-?\d*.?\d+$/;
	return patrn.test(s);
}
/**
*是否闰年
**/
function isLeapYear(y){
	return (y % 4 == 0 && y % 100 != 0) || y % 400 == 0;
}
/**
*日期
*yyyy-mm-dd格式或yyyy/mm/dd格式，年用两位表示亦可
*Regex author:Michael Ash
*支持1600年以后
*/
function isDateYMD(s){
	var patrn = /^(?:(?:(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(\/|-|\.)(?:0?2\1(?:29)))|(?:(?:(?:1[6-9]|[2-9]\d)?\d{2})(\/|-|\.)(?:(?:(?:0?[13578]|1[02])\2(?:31))|(?:(?:0?[1,3-9]|1[0-2])\2(29|30))|(?:(?:0?[1-9])|(?:1[0-2]))\2(?:0?[1-9]|1\d|2[0-8]))))$/;
	return patrn.test(s);
}
/**
*日期
*dd-mm-yyyy格式或dd/mm/yyyy格式，年用两位表示亦可
*Regex author:Marco Storti
*支持1600年以后
*/
function isDateDMY(s){
	var patrn = /^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)0?2\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$/;
	return patrn.test(s);
}
/**
*日期
*mm-dd-yyyy格式或mm/dd/yyyy格式，年用两位表示亦可
*Regex author:Michael Ash
*支持1600年以后
*/
function isDateMDY(s){
	var patrn =  /^(?:(?:(?:0?[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0?[13-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:0?2(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:(?:0?[1-9])|(?:1[0-2]))(\/|-|\.)(?:0?[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$/;
	return patrn.test(s);
}
/**
*日期时间：M/d/y hh:mm:ss
*Regex author:Michael Ash
*支持1600年以后
*/
function isDateTimeMDY(s){
	var patrn = /^(?=\d)(?:(?:(?:(?:(?:0?[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0?[1,3-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})|(?:0?2(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))|(?:(?:0?[1-9])|(?:1[0-2]))(\/|-|\.)(?:0?[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2}))($|\ (?=\d)))?(((0?[1-9]|1[012])(:[0-5]\d){0,2}(\ [AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$/;
	return patrn.test(s);
}
/**
*日期时间 yyyy/mm/dd hh:mm:ss 或 yyyy-mm-dd hh:mm:ss
*Date Regex author:Michael Ash
*Modified by Shaw Sunkee
*支持1600年以后
*/
function isDateTimeYMD(s){
	var patrn = /^(?:(?:(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(\/|-|\.)(?:0?2\1(?:29)))|(?:(?:(?:1[6-9]|[2-9]\d)?\d{2})(\/|-|\.)(?:(?:(?:0?[13578]|1[02])\2(?:31))|(?:(?:0?[1,3-9]|1[0-2])\2(29|30))|(?:(?:0?[1-9])|(?:1[0-2]))\2(?:0?[1-9]|1\d|2[0-8]))))[ ]([0-1]?[0-9]|[2][0-3]):([0-5]?[0-9]):([0-5]?[0-9])$/;;
	return patrn.test(s);
}
/**
*时间
*hh:mm:ss 24小时制 0 ~ 23 hour
*/
function isTime(s){
	var patrn = /^([0-1]?[0-9]|[2][0-3]):([0-5]?[0-9]):([0-5]?[0-9])$/;
	return patrn.test(s);
}

/**
*	是否包含非特殊字符(正常字符包括字母数字，下划线，和点号，空格，@#$% 和双字节)
*	若包含，返回 true
*/
var validation_specialChars = new Array('\'','\"','\n','\r','\t',';',':','=','<','>',',','|','\\','<','>','/','^','~','`');
function containsSpecialChar(str){
	for(var i = 0;i<validation_specialChars.length;i++){
		if(str.indexOf(validation_specialChars[i]) > -1){
			return true;
		}
	}
	return false;
}
/**
*	判断是否为数字串(可在串前加"-"号，如：-123)
*	两种调用方式:
*	1.一个参数，不限制长度
*	2.三个参数，第二个参数表示允许的最小长度，第三个参数表示允许的最大长度
*/
function isDigitString(){
	return judgePattrnAndLen("-?\\d",arguments);
}
/**字母串
*	两种调用方式：
*	一种是一个参数，传入要验证的值
*	二种是带三个参数，第二和第三个参数分别代表最小长度和最大长度
*/
function isLetter(){
	return judgePattrnAndLen("[A-Za-z]",arguments);
}

/**
*	大写字母
*	两种调用方式：
*	一种是一个参数，传入要验证的值
*	二种是带三个参数，第二和第三个参数分别代表最小长度和最大长度
*/
function isUpperLetter(){
	return judgePattrnAndLen("[A-Z]",arguments);
}
/**
*	小写字母
*	两种调用方式：
*	一种是一个参数，传入要验证的值
*	二种是带三个参数，第二和第三个参数分别代表最小长度和最大长度
*/
function isLowerLetter(){
	return judgePattrnAndLen("[a-z]",arguments);
}
/**数字与字符串*/
function isLetterNumString(){
	return judgePattrnAndLen("[A-Za-z0-9]",arguments);
}
/**数字，字母，下划线字符串*/
function isLNUString(s){
	return judgePattrnAndLen("\\w",arguments);
}
/**
*传入一个简单的正则式串，要判定的值，传入限定最小长度和最大长度
**/
function judgePattrnAndLen(){
	var pat = arguments[0];
	var as = arguments[1];
	if(as == null || as == undefined || as.length == 0){
		alert('no arguments.');
		return false;
	}else if(as.length == 1){
		eval("var patrn= /^" + pat + "+$/;");
		return eval("patrn.test(as[0]);");
	}else if(as.length == 3){
		if(isDigit(as[1]) && isDigit(as[2])){
			eval("patrn =" + "/^" + pat + "{" + as[1] + "," + as[2] + "}$/;");
			return eval("patrn.test(as[0]);");
		}else{
			alert('error arguments:the 2nd argument and the 3rd argument must be number.');
			return false;
		}
	}else{
		alert('error arguments number');
		return false;
	}
}
